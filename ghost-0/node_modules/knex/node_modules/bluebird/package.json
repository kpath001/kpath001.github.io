{
  "name": "bluebird",
  "description": "Full featured Promises/A+ implementation with exceptionally good performance",
  "version": "1.0.8",
  "keywords": [
    "promise",
    "performance",
    "promises",
    "promises-a",
    "promises-aplus",
    "async",
    "await",
    "deferred",
    "deferreds",
    "future",
    "flow control",
    "dsl",
    "fluent interface"
  ],
  "scripts": {
    "test": "grunt test"
  },
  "homepage": "https://github.com/petkaantonov/bluebird",
  "repository": {
    "type": "git",
    "url": "git://github.com/petkaantonov/bluebird.git"
  },
  "bugs": {
    "url": "http://github.com/petkaantonov/bluebird/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Petka Antonov",
    "email": "petka_antonov@hotmail.com",
    "url": "http://github.com/petkaantonov/"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-watch": "latest",
    "grunt-contrib-connect": "latest",
    "grunt-saucelabs": "latest",
    "acorn": "~0.3.1",
    "mocha": "~1.12.1",
    "q": "~0.9.7",
    "when": "~2.4.0",
    "deferred": "~0.6.5",
    "rsvp": "~2.0.4",
    "avow": "~2.0.1",
    "jsdom": "~0.8.4",
    "jquery-browserify": "~1.8.1",
    "sinon": "~1.7.3",
    "kew": "~0.2.2",
    "browserify": "~2.35.0",
    "concurrent": "~0.3.2",
    "text-table": "~0.2.0",
    "grunt-cli": "~0.1.9",
    "jshint-stylish": "~0.1.3",
    "semver-utils": "~1.1.0",
    "rimraf": "~2.2.6",
    "mkdirp": "~0.3.5"
  },
  "readmeFilename": "README.md",
  "main": "./js/main/bluebird.js",
  "readme": "[![Build Status](https://travis-ci.org/petkaantonov/bluebird.png?branch=master)](https://travis-ci.org/petkaantonov/bluebird)\n\n<a href=\"http://promisesaplus.com/\">\n    <img src=\"http://promisesaplus.com/assets/logo-small.png\" alt=\"Promises/A+ logo\"\n         title=\"Promises/A+ 1.0 compliant\" align=\"right\" />\n</a>\n\n#Introduction\n\nBluebird is a fully featured [promise](#what-are-promises-and-why-should-i-use-them) library with focus on innovative features and performance\n\n#Topics\n\n- [Features](#features)\n- [Quick start](#quick-start)\n- [API Reference and examples](https://github.com/petkaantonov/bluebird/blob/master/API.md)\n- [What are promises and why should I use them?](#what-are-promises-and-why-should-i-use-them)\n- [Questions and issues](#questions-and-issues)\n- [Error handling](#error-handling)\n- [Development](#development)\n    - [Testing](#testing)\n    - [Benchmarking](#benchmarks)\n    - [Custom builds](#custom-builds)\n    - [For library authors](#for-library-authors)\n- [What is the sync build?](#what-is-the-sync-build)\n- [License](#license)\n- [Snippets for common problems](https://github.com/petkaantonov/bluebird/wiki/Snippets)\n- [Promise anti-patterns](https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns)\n- [Changelog](https://github.com/petkaantonov/bluebird/blob/master/changelog.md)\n- [Optimization guide](#optimization-guide)\n\n#Features:\n\n- [Promises A+ 2.0.2](http://promisesaplus.com)\n- [Cancellation](https://github.com/promises-aplus)\n- [Progression](https://github.com/promises-aplus/progress-spec)\n- [Synchronous inspection](https://github.com/promises-aplus/synchronous-inspection-spec)\n- [`.bind`](https://github.com/petkaantonov/bluebird/blob/master/API.md#binddynamic-thisarg---promise)\n- [Complete parallel for C# 5.0 async and await](https://github.com/petkaantonov/bluebird/blob/master/API.md#promisecoroutinegeneratorfunction-generatorfunction---function)\n- [Collection methods](https://github.com/petkaantonov/bluebird/blob/master/API.md#collections) such as All, any, some, settle, map, filter, reduce, spread, join, race...\n- [Practical debugging solutions](#error-handling) such as unhandled rejection reporting, typed catches, catching only what you expect and very long, relevant stack traces without losing perf\n- [Sick performance](https://github.com/petkaantonov/bluebird/tree/master/benchmark/stats)\n\nPasses [AP2](https://github.com/petkaantonov/bluebird/tree/master/test/mocha), [AP3](https://github.com/petkaantonov/bluebird/tree/master/test/mocha), [Cancellation](https://github.com/petkaantonov/bluebird/blob/master/test/mocha/cancel.js), [Progress](https://github.com/petkaantonov/bluebird/blob/master/test/mocha/q_progress.js) tests and more. See [testing](#testing).\n\n<hr>\n\n#Quick start\n\n##Node.js\n\n    npm install bluebird\n\nThen:\n\n```js\nvar Promise = require(\"bluebird\");\n```\n\n##Browsers\n\nDownload the [bluebird.js](https://github.com/petkaantonov/bluebird/tree/master/js/browser) file. And then use a script tag:\n\n```html\n<script type=\"text/javascript\" src=\"/scripts/bluebird.js\"></script>\n```\n\nThe global variable `Promise` becomes available after the above script tag.\n\n####Browser support\n\nBrowsers that [implement ECMA-262, edition 3](http://en.wikipedia.org/wiki/Ecmascript#Implementations) and later are supported.\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/petka_antonov.svg)](https://saucelabs.com/u/petka_antonov)\n\n*IE7 and IE8 had to be removed from tests due to SauceLabs bug but are supported and pass all tests*\n\n**Note** that in ECMA-262, edition 3 (IE7, IE8 etc) it is not possible to use methods that have keyword names like `.catch` and `.finally`. The [API documentation](https://github.com/petkaantonov/bluebird/blob/master/API.md) always lists a compatible alternative name that you can use if you need to support these browsers. For example `.catch` is replaced with `.caught` and `.finally` with `.lastly`.\n\nAlso, [long stack trace](https://github.com/petkaantonov/bluebird/blob/master/API.md#promiselongstacktraces---void) support is only available in Chrome and Firefox.\n\n<sub>Previously bluebird required es5-shim.js and es5-sham.js to support Edition 3 - these are **no longer required** as of **0.10.4**.</sub>\n\nAfter quick start, see [API Reference and examples](https://github.com/petkaantonov/bluebird/blob/master/API.md)\n\n<hr>\n\n#What are promises and why should I use them?\n\nYou should use promises to turn this:\n\n```js\nreadFile(\"file.json\", function(err, val) {\n    if( err ) {\n        console.error(\"unable to read file\");\n    }\n    else {\n        try {\n            val = JSON.parse(val);\n            console.log(val.success);\n        }\n        catch( e ) {\n            console.error(\"invalid json in file\");\n        }\n    }\n});\n```\n\nInto this:\n\n```js\nreadFile(\"file.json\").then(JSON.parse).then(function(val) {\n    console.log(val.success);\n})\n.catch(SyntaxError, function(e) {\n    console.error(\"invalid json in file\");\n})\n.catch(function(e){\n    console.error(\"unable to read file\")\n});\n```\n\nActually you might notice the latter has a lot in common with code that would do the same using synchronous I/O:\n\n```js\ntry {\n    var val = JSON.parse(readFile(\"file.json\"));\n    console.log(val.success);\n}\n//Syntax actually not supported in JS but drives the point\ncatch(SyntaxError e) {\n    console.error(\"invalid json in file\");\n}\ncatch(Error e) {\n    console.error(\"unable to read file\")\n}\n```\n\nAnd that is the point - being able to have something that is a lot like `return` and `throw` in synchronous code.\n\nYou can also use promises to improve code that was written with callback helpers:\n\n\n```js\n//Copyright Plato http://stackoverflow.com/a/19385911/995876\n//CC BY-SA 2.5\nmapSeries(URLs, function (URL, done) {\n    var options = {};\n    needle.get(URL, options, function (error, response, body) {\n        if (error) {\n            return done(error)\n        }\n        try {\n            var ret = JSON.parse(body);\n            return done(null, ret);\n        }\n        catch (e) {\n            done(e);\n        }\n    });\n}, function (err, results) {\n    if (err) {\n        console.log(err)\n    } else {\n        console.log('All Needle requests successful');\n        // results is a 1 to 1 mapping in order of URLs > needle.body\n        processAndSaveAllInDB(results, function (err) {\n            if (err) {\n                return done(err)\n            }\n            console.log('All Needle requests saved');\n            done(null);\n        });\n    }\n});\n```\n\nIs more pleasing to the eye when done with promises:\n\n```js\nPromise.promisifyAll(needle);\nvar options = {};\n\nvar current = Promise.resolve();\nPromise.map(URLs, function(URL) {\n    current = current.then(function () {\n        return needle.getAsync(URL, options);\n    });\n    return current;\n}).map(function(responseAndBody){\n    return JSON.parse(responseAndBody[1]);\n}).then(function (results) {\n    return processAndSaveAllInDB(results);\n}).then(function(){\n    console.log('All Needle requests saved');\n}).catch(function (e) {\n    console.log(e);\n});\n```\n\nAlso promises don't just give you correspondences for synchronous features but can also be used as limited event emitters or callback aggregators.\n\nMore reading:\n\n - [Promise nuggets](http://spion.github.io/promise-nuggets/)\n - [Why I am switching to promises](http://spion.github.io/posts/why-i-am-switching-to-promises.html)\n - [What is the the point of promises](http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/#toc_1)\n - [Snippets for common problems](https://github.com/petkaantonov/bluebird/wiki/Snippets)\n - [Promise anti-patterns](https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns)\n\n#Questions and issues\n\nIf you find a bug in bluebird or have a feature request, file an issue in the [github issue tracker](https://github.com/petkaantonov/bluebird/issues). Anything else, such as questions for help in using the library, should be posted in [StackOverflow](http://stackoverflow.com/questions/tagged/bluebird) under tags `promise` and `bluebird`.\n\n#Error handling\n\nThis is a problem every promise library needs to handle in some way. Unhandled rejections/exceptions don't really have a good agreed-on a",
  "_id": "bluebird@1.0.8",
  "_from": "bluebird@~1.0.0"
}
